

 public class Main{
    public static void main(String [] args){
    int n [] = {0 ,1,0,2,3,0};
        swapzeroestolast(n);
       for(int i =0;i<n.length;i++)
           System.out.println(n[i]);

    }
static void bubblesort(int [] a){
        int n= a.length;
        for(int i=0;i<n-1;i++){
            for(int j=0;j<n-i-1;j++){
                if(a[j]>a[j+1]){
                    int temp =a[j+1];
                    a[j+1]=a[j];
                    a[j]=temp;
                }
            }
        }
}
static void selection_void(int [] a){
        int n= a.length;
        for(int i=0;i<n-1;i++){
            int min=0;
            for(int j=i;j<n-1;j++){

                if(a[j]<a[i]){
                    min= a[j];
                }
                int temp= a[i];
                a[i]=min;
                a[j]=temp;
            }
        }

}
static void insertionsort(int a []){
        int n = a.length;
       for(int i=1;i<n;i++){
           int j= i;
           while(j>0 && a[j]<a[j-1]){
               int temp= a[j-1];
               a[j-1]=a[j];
               a[j]=temp;
               j--;
           }
       }
}
static void swapzeroestolast(int [] a){

        int n = a.length;
        for(int i =0;i<n-1;i++){
            for(int j=0;j<n-1-i;j++){
                if(a[j]==0 && a[j]<a[j+1]){
                    int temp= a[j];
                    a[j]=a[j+1];
                    a[j+1]=temp;
                }

            }
        }
}
static void lexicographically(String [] a){
        int n = a.length;
        for(int i =0;i<n-1;i++){
            int min = i;
            for(int j=i+1;j<=n-1;j++){
                if(a[min].compareTo(a[j])>0) {
                    min = j;
                }
            }
            String temp = a[i];
            a[i]=a[min];
            a[min]=temp;
        }


}
static void mergesort(int [] a, int l,int r){
        if(a.length==1){
            return;
        }
        int mid=(l+r)/2;
        mergesort(a,l,mid);
        mergesort(a,mid+1,r);
        merge(a,l,mid,r);

}
static void merge(int [] arr, int l, int mid,int r){
        int n1=mid-l+1;
        int n2= r-mid;
        int i,j,k;
        int [] left= new int [n1];
        int [] right = new int [n2];
        for(i=0;i<n1;i++)
            left[i]=arr[l+i];
        for(i=0;i<n2;i++)
            right[i]=arr[mid+1+i];
        i=j=0;k=l;
        while(i<n1 && j<n2){

            if(left[i]<right[j])
                arr[k++]=right[j++];
            else
                arr[k++]=left[i++];


        }
        while(i<n1)
            arr[k++]=left[i++];
        while(j<n2)
            arr[k++]=right[j++];


}
static void quicksort(int [] arr){}
     static void swap(int [] arr,int x,int y){
         int temp= arr[x];
         arr[x]= arr[y];
         arr[y]=temp;
     }
static void partition(int [] arr,int st,int end){
        int count=0;
        int i=st+1;
        while(i< end){
            if(arr[i]<=arr[st])
                count++;
            i++;
    }
        int pivotidex=count+st;
swap(arr,st, pivotidex);
int j;
i=st;j=end;
while(i<pivotidex && j>pivotidex){
    while(arr[i]<=arr[pivotidex])
        i++;
    while(arr[j]>= arr[pivotidex])
        j--;
    if(i<pivotidex && j >pivotidex){
        swap(arr,i,j);
        i++;
        j--;
    }

}
}
}
